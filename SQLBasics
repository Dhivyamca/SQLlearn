Table 1 Query:
Create Table EmployeeDemographics 
(EmployeeID int, 
FirstName varchar(50), 
LastName varchar(50), 
Age int, 
Gender varchar(50)
)

Table 2 Query:
Create Table EmployeeSalary 
(EmployeeID int, 
JobTitle varchar(50), 
Salary int
)



Table 1 Insert:
Insert into EmployeeDemographics VALUES
(1001, 'Jim', 'Halpert', 30, 'Male'),
(1002, 'Pam', 'Beasley', 30, 'Female'),
(1003, 'Dwight', 'Schrute', 29, 'Male'),
(1004, 'Angela', 'Martin', 31, 'Female'),
(1005, 'Toby', 'Flenderson', 32, 'Male'),
(1006, 'Michael', 'Scott', 35, 'Male'),
(1007, 'Meredith', 'Palmer', 32, 'Female'),
(1008, 'Stanley', 'Hudson', 38, 'Male'),
(1009, 'Kevin', 'Malone', 31, 'Male')

Table 2 Insert:
Insert Into EmployeeSalary VALUES
(1001, 'Salesman', 45000),
(1002, 'Receptionist', 36000),
(1003, 'Salesman', 63000),
(1004, 'Accountant', 47000),
(1005, 'HR', 50000),
(1006, 'Regional Manager', 65000),
(1007, 'Supplier Relations', 41000),
(1008, 'Salesman', 48000),
(1009, 'Accountant', 42000)


elect * FROM [SQL Tutorial].dbo.EmployeeDemographics;* from

select * from [SQL Tutorial].dbo.EmployeeSalary;

select Gender, Age , count(Gender) from EmployeeDemographics group by Gender ,Age

select Gender, count(Gender) from EmployeeDemographics where Age > 30 group by Gender, Age ORDER BY Gender, Age

select * from EmployeeDemographics  Inner join EmployeeSalary ON EmployeeDemographics.EmployeeID= EmployeeSalary.EmployeeID


insert into [SQL Tutorial].dbo.EmployeeSalary values (1010,'developer',50000)
select * from 
[SQL Tutorial].dbo.EmployeeDemographics  Full outer join [SQL Tutorial].dbo.EmployeeSalary 
ON EmployeeDemographics.EmployeeID=EmployeeSalary.EmployeeID

select * from 
[SQL Tutorial].dbo.EmployeeDemographics  left outer join [SQL Tutorial].dbo.EmployeeSalary 
ON EmployeeDemographics.EmployeeID=EmployeeSalary.EmployeeID

-- Max salary
select Top (1) EmployeeDemographics.FirstName,salary from
[SQL Tutorial].dbo.EmployeeDemographics  Inner join [SQL Tutorial].dbo.EmployeeSalary 
ON EmployeeDemographics.EmployeeID=EmployeeSalary.EmployeeID
where FirstName <> 'Michael' order by Salary DESC

-- avg salary of salesman
select JobTitle,AVG(salary) from
[SQL Tutorial].dbo.EmployeeDemographics  Inner join [SQL Tutorial].dbo.EmployeeSalary 
ON EmployeeDemographics.EmployeeID=EmployeeSalary.EmployeeID

group by JobTitle


Insert into [SQL Tutorial].dbo.EmployeeDemographics VALUES
(1011, 'Ryan', 'Howard', 26, 'Male'),
(NULL, 'Holly', 'Flax', NULL, NULL),
(1013, 'Darryl', 'Philbin', NULL, 'Male')


Create Table WareHouseEmployeeDemographics 
(EmployeeID int, 
FirstName varchar(50), 
LastName varchar(50), 
Age int, 
Gender varchar(50)
)

Insert into WareHouseEmployeeDemographics VALUES
(1013, 'Darryl', 'Philbin', NULL, 'Male'),
(1050, 'Roy', 'Anderson', 31, 'Male'),
(1051, 'Hidetoshi', 'Hasagawa', 40, 'Male'),
(1052, 'Val', 'Johnson', 31, 'Female')


select * from [SQL Tutorial].dbo.WareHouseEmployeeDemographics inner join [SQL Tutorial].dbo.EmployeeDemographics on WareHouseEmployeeDemographics.EmployeeID=EmployeeDemographics.EmployeeID

-- union will select all the elements with the circle and joins will only correlated

select * from [SQL Tutorial].dbo.WareHouseEmployeeDemographics
UNION 
select * from [SQL Tutorial].dbo.EmployeeDemographics

--UNION ALL WILL SHOW DUPLICATE ELEMENTS TOO
select * from [SQL Tutorial].dbo.WareHouseEmployeeDemographics
UNION ALL 
select * from [SQL Tutorial].dbo.EmployeeDemographics
ORDER BY EmployeeID



-- CASE

select EmployeeID,JobTitle,Salary,
 Case
     when JobTitle='Salesman' THEN Salary+(Salary * 0.10)
     
	 else Salary+(Salary * 0.3)
end AS Increment
from [SQL Tutorial].dbo.Employeesalary

-- Throws ERROR SINCE after joins in aggregatin where cant validate only use HAVING CLAUSE AFTER GROUP BY

select JobTitle from
[SQL Tutorial].dbo.EmployeeDemographics  Inner join [SQL Tutorial].dbo.EmployeeSalary 
ON EmployeeDemographics.EmployeeID=EmployeeSalary.EmployeeID
Where COUNT(JobTitle)>1
GROUP BY JobTitle

-- CORRCT

select JobTitle,COUNT(JobTitle)
from
[SQL Tutorial].dbo.EmployeeDemographics  Inner join [SQL Tutorial].dbo.EmployeeSalary 
ON EmployeeDemographics.EmployeeID=EmployeeSalary.EmployeeID

GROUP BY JobTitle
HAVING COUNT(JobTitle) >1

-- AVG SALARY

select JobTitle,AVG(Salary)
from
[SQL Tutorial].dbo.EmployeeDemographics  Inner join [SQL Tutorial].dbo.EmployeeSalary 
ON EmployeeDemographics.EmployeeID=EmployeeSalary.EmployeeID

GROUP BY JobTitle
ORDER BY AVG(Salary)
-- avg salary range

select JobTitle,AVG(Salary)
from
[SQL Tutorial].dbo.EmployeeDemographics  Inner join [SQL Tutorial].dbo.EmployeeSalary 
ON EmployeeDemographics.EmployeeID=EmployeeSalary.EmployeeID

GROUP BY JobTitle
HAVING AVG(Salary) > 45000
ORDER BY AVG(Salary)

-- max salary WITHOUT AGGREATE FUNCTION

select TOP(1) JobTitle,Salary
from
[SQL Tutorial].dbo.EmployeeDemographics  Inner join [SQL Tutorial].dbo.EmployeeSalary 
ON EmployeeDemographics.EmployeeID=EmployeeSalary.EmployeeID
ORDER BY Salary DESC

--update

UPDATE  [SQL Tutorial].dbo.EmployeeDemographics set age=30 , Gender='Male' where EmployeeID=1013

select * from [SQL Tutorial].dbo.EmployeeDemographics where EmployeeID=1013

delete from [SQL Tutorial].dbo.EmployeeDemographics where EmployeeID=1013

--  Aliases

select FirstName + ' ' + LastName as fname from [SQL Tutorial].dbo.EmployeeDemographics

select * from [SQL Tutorial].dbo.WareHouseEmployeeDemographics

select * from [SQL Tutorial].dbo.EmployeeSalary

insert into [SQL Tutorial].dbo.EmployeeSalary values(1013,'Salesman',50000)

select demo.EmployeeID,sal.Salary
from [SQL Tutorial].dbo.EmployeeDemographics as demo
inner join [SQL Tutorial].dbo.EmployeeSalary  as sal

on demo.EmployeeID=sal.EmployeeID
inner join  [SQL Tutorial].dbo.WareHouseEmployeeDemographics AS war
on sal.EmployeeID =war.EmployeeID


-- CTE REFERENCES WITH
-- partition

WITH Employee as
(select FirstName,LastName , Gender ,Salary,
COUNT (Gender) OVER (PARTITION BY Gender) as total_gender,
AVG(Salary) OVER (PARTITION BY Salary) as Salary
from [SQL Tutorial].dbo.EmployeeDemographics as demo
inner join [SQL Tutorial].dbo.EmployeeSalary  as sal

on demo.EmployeeID=sal.EmployeeID
where Salary > 45000
)

select * from Employee


--tmp table and insertfrom select

Create table #temp_employee2 (
EmployeeID int,
JobTitle varchar(100),
Salary int
)

Select * From #temp_employee2

Insert into #temp_employee2 values (
'1001', 'HR', '45000'
)

Insert into #temp_employee2 
SELECT * From [SQL Tutorial].dbo.EmployeeSalary

Select * From #temp_employee2




DROP TABLE IF EXISTS #temp_employee3
Create table #temp_employee3 (
JobTitle varchar(100),
EmployeesPerJob int ,
AvgAge int,
AvgSalary int
)


Insert into #temp_employee3
SELECT JobTitle, Count(JobTitle), Avg(Age), AVG(salary)
FROM [SQL Tutorial].dbo.EmployeeDemographics emp
JOIN [SQL Tutorial].dbo.EmployeeSalary sal
	ON emp.EmployeeID = sal.EmployeeID
group by JobTitle

Select * 
From #temp_employee3

SELECT AvgAge * AvgSalary
from #temp_employee3

-- subquery

Select EmployeeID, JobTitle, Salary
From EmployeeSalary

-- Subquery in Select

Select EmployeeID, Salary, (Select AVG(Salary) From EmployeeSalary) as AllAvgSalary
From EmployeeSalary

-- How to do it with Partition By
Select EmployeeID, Salary, AVG(Salary) over () as AllAvgSalary
From EmployeeSalary

-- Why Group By doesn't work
Select EmployeeID, Salary, AVG(Salary) as AllAvgSalary
From EmployeeSalary
Group By EmployeeID, Salary
order by EmployeeID


-- Subquery in From

Select a.EmployeeID, AllAvgSalary
From 
	(Select EmployeeID, Salary, AVG(Salary) over () as AllAvgSalary
	 From EmployeeSalary) a
Order by a.EmployeeID


-- Subquery in Where(always select inner query where to match it


Select EmployeeID, JobTitle, Salary
From EmployeeSalary
where EmployeeID in (
	Select EmployeeID 
	From EmployeeDemographics
	where Age > 30)
	
-- string function

CREATE TABLE EmployeeErrors (
EmployeeID varchar(50)
,FirstName varchar(50)
,LastName varchar(50)
)

Insert into EmployeeErrors Values 
('1001  ', 'Jimbo', 'Halbert')
,('  1002', 'Pamela', 'Beasely')
,('1005', 'TOby', 'Flenderson - Fired')

Select *
From EmployeeErrors

-- Using Trim, LTRIM, RTRIM

Select EmployeeID, TRIM(employeeID) AS IDTRIM
FROM EmployeeErrors 

Select EmployeeID, RTRIM(employeeID) as IDRTRIM
FROM EmployeeErrors 

Select EmployeeID, LTRIM(employeeID) as IDLTRIM
FROM EmployeeErrors 

	



-- Using Replace

Select LastName, REPLACE(LastName, '- Fired', '') as LastNameFixed
FROM EmployeeErrors


-- Using Substring

Select Substring(err.FirstName,1,3), Substring(dem.FirstName,1,3), Substring(err.LastName,1,3), Substring(dem.LastName,1,3)
FROM EmployeeErrors err
JOIN EmployeeDemographics dem
	on Substring(err.FirstName,1,3) = Substring(dem.FirstName,1,3)
	and Substring(err.LastName,1,3) = Substring(dem.LastName,1,3)



-- Using UPPER and lower

Select firstname, LOWER(firstname)
from EmployeeErrors

Select Firstname, UPPER(FirstName)
from EmployeeErrors


--PROCEDURE

CREATE PROCEDURE Temp_Employee
AS
DROP TABLE IF EXISTS #temp_employee
Create table #temp_employee (
JobTitle varchar(100),
EmployeesPerJob int ,
AvgAge int,
AvgSalary int
)


Insert into #temp_employee
SELECT JobTitle, Count(JobTitle), Avg(Age), AVG(salary)
FROM SQLTutorial..EmployeeDemographics emp
JOIN SQLTutorial..EmployeeSalary sal
	ON emp.EmployeeID = sal.EmployeeID
group by JobTitle

Select * 
From #temp_employee
GO;




CREATE PROCEDURE Temp_Employee2 
@JobTitle nvarchar(100)
AS
DROP TABLE IF EXISTS #temp_employee3
Create table #temp_employee3 (
JobTitle varchar(100),
EmployeesPerJob int ,
AvgAge int,
AvgSalary int
)


Insert into #temp_employee3
SELECT JobTitle, Count(JobTitle), Avg(Age), AVG(salary)
FROM SQLTutorial..EmployeeDemographics emp
JOIN SQLTutorial..EmployeeSalary sal
	ON emp.EmployeeID = sal.EmployeeID
where JobTitle = @JobTitle --- make sure to change this in this script from original above
group by JobTitle

Select * 
From #temp_employee3
GO;


exec Temp_Employee2 @jobtitle = 'Salesman'
exec Temp_Employee2 @jobtitle = 'Accountant'






