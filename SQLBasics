Table 1 Query:
Create Table EmployeeDemographics 
(EmployeeID int, 
FirstName varchar(50), 
LastName varchar(50), 
Age int, 
Gender varchar(50)
)

Table 2 Query:
Create Table EmployeeSalary 
(EmployeeID int, 
JobTitle varchar(50), 
Salary int
)



Table 1 Insert:
Insert into EmployeeDemographics VALUES
(1001, 'Jim', 'Halpert', 30, 'Male'),
(1002, 'Pam', 'Beasley', 30, 'Female'),
(1003, 'Dwight', 'Schrute', 29, 'Male'),
(1004, 'Angela', 'Martin', 31, 'Female'),
(1005, 'Toby', 'Flenderson', 32, 'Male'),
(1006, 'Michael', 'Scott', 35, 'Male'),
(1007, 'Meredith', 'Palmer', 32, 'Female'),
(1008, 'Stanley', 'Hudson', 38, 'Male'),
(1009, 'Kevin', 'Malone', 31, 'Male')

Table 2 Insert:
Insert Into EmployeeSalary VALUES
(1001, 'Salesman', 45000),
(1002, 'Receptionist', 36000),
(1003, 'Salesman', 63000),
(1004, 'Accountant', 47000),
(1005, 'HR', 50000),
(1006, 'Regional Manager', 65000),
(1007, 'Supplier Relations', 41000),
(1008, 'Salesman', 48000),
(1009, 'Accountant', 42000)


elect * FROM [SQL Tutorial].dbo.EmployeeDemographics;* from

select * from [SQL Tutorial].dbo.EmployeeSalary;

select Gender, Age , count(Gender) from EmployeeDemographics group by Gender ,Age

select Gender, count(Gender) from EmployeeDemographics where Age > 30 group by Gender, Age ORDER BY Gender, Age

select * from EmployeeDemographics  Inner join EmployeeSalary ON EmployeeDemographics.EmployeeID= EmployeeSalary.EmployeeID


insert into [SQL Tutorial].dbo.EmployeeSalary values (1010,'developer',50000)
select * from 
[SQL Tutorial].dbo.EmployeeDemographics  Full outer join [SQL Tutorial].dbo.EmployeeSalary 
ON EmployeeDemographics.EmployeeID=EmployeeSalary.EmployeeID

select * from 
[SQL Tutorial].dbo.EmployeeDemographics  left outer join [SQL Tutorial].dbo.EmployeeSalary 
ON EmployeeDemographics.EmployeeID=EmployeeSalary.EmployeeID

-- Max salary
select Top (1) EmployeeDemographics.FirstName,salary from
[SQL Tutorial].dbo.EmployeeDemographics  Inner join [SQL Tutorial].dbo.EmployeeSalary 
ON EmployeeDemographics.EmployeeID=EmployeeSalary.EmployeeID
where FirstName <> 'Michael' order by Salary DESC

-- avg salary of salesman
select JobTitle,AVG(salary) from
[SQL Tutorial].dbo.EmployeeDemographics  Inner join [SQL Tutorial].dbo.EmployeeSalary 
ON EmployeeDemographics.EmployeeID=EmployeeSalary.EmployeeID

group by JobTitle


Insert into [SQL Tutorial].dbo.EmployeeDemographics VALUES
(1011, 'Ryan', 'Howard', 26, 'Male'),
(NULL, 'Holly', 'Flax', NULL, NULL),
(1013, 'Darryl', 'Philbin', NULL, 'Male')


Create Table WareHouseEmployeeDemographics 
(EmployeeID int, 
FirstName varchar(50), 
LastName varchar(50), 
Age int, 
Gender varchar(50)
)

Insert into WareHouseEmployeeDemographics VALUES
(1013, 'Darryl', 'Philbin', NULL, 'Male'),
(1050, 'Roy', 'Anderson', 31, 'Male'),
(1051, 'Hidetoshi', 'Hasagawa', 40, 'Male'),
(1052, 'Val', 'Johnson', 31, 'Female')


select * from [SQL Tutorial].dbo.WareHouseEmployeeDemographics inner join [SQL Tutorial].dbo.EmployeeDemographics on WareHouseEmployeeDemographics.EmployeeID=EmployeeDemographics.EmployeeID

-- union will select all the elements with the circle and joins will only correlated

select * from [SQL Tutorial].dbo.WareHouseEmployeeDemographics
UNION 
select * from [SQL Tutorial].dbo.EmployeeDemographics

--UNION ALL WILL SHOW DUPLICATE ELEMENTS TOO
select * from [SQL Tutorial].dbo.WareHouseEmployeeDemographics
UNION ALL 
select * from [SQL Tutorial].dbo.EmployeeDemographics
ORDER BY EmployeeID



-- CASE

select EmployeeID,JobTitle,Salary,
 Case
     when JobTitle='Salesman' THEN Salary+(Salary * 0.10)
     
	 else Salary+(Salary * 0.3)
end AS Increment
from [SQL Tutorial].dbo.Employeesalary





